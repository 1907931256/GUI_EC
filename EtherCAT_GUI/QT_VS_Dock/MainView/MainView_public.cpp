#include "mainformview.h"

#include <QSettings>
#include <QDir>
#include <QMessageBox>
#include <QTextStream>

///
/// \brief 连接master
/// \param master
///
void MainFormView::Master_attach(DRE_Master *master)
{
    m_master = master;
}

///
/// \brief 释放master
///
void MainFormView::Master_dettach()
{
    m_master = nullptr;
}

///
/// \brief 获取master
/// \return
///
DRE_Master *MainFormView::get_MasterPtr()
{
    return m_master;
}

///
/// \brief 获取genetalTabPtr
/// \return
///
Component_EtherCAT *MainFormView::get_genetalTabPtr()
{
    return m_component_EtherCAT;
}

///
/// \brief 设置插件的路径
/// \param path
///
void MainFormView::set_Plugin_Dirs(const QString &path)
{
    //对组件循环遍历
    foreach (Component_Private* component, *(this->m_ComponentList)) {
        component->set_AppPath(path);
    }

    this->m_pluginDir = path;//mainvie也保留下
}

///
/// \brief 系统的调试信息打印
/// \param message
///
void MainFormView::System_BottomMessage(const QString &message){
    this->m_MessageText->appendPlainText("[ Master ]\t"+message);
}

///
/// \brief 加载配置
/// \param path
/// \return
///
int MainFormView::Load_setting(const QString &path){
    QFile file(path);
    if(file.exists()){
        QSettings setting(path,QSettings::IniFormat);//读配置文件

        QString setting_pluginDir =  setting.value("Path/PluginPath").toString();
        QDir dir;
        dir= QDir(setting_pluginDir);
        if(dir.exists()){
            set_Plugin_Dirs(setting_pluginDir);
        }
        else{
            QMessageBox::warning(this,tr("Path Error!"),"PluginPath is Invalid,loading default path..");
        }
    }
    else{ //设置成默认路径
        set_Plugin_Dirs("./");
//        qDebug() << "Load default setting!";
        Set_StatusMessage(tr("Load default setting!"),3000);
    }

    return 0;

}

///
/// \brief 保存配置
/// \param path
/// \return
///
int MainFormView::Save_setting(const QString &path){

   QSettings setting(path,QSettings::IniFormat);//读配置文件
   setting.beginGroup(tr("Login"));
   setting.setValue("account","DRE");//设置key和value，也就是参数和值
   setting.setValue("password","123456");
   setting.endGroup();//节点结束

   setting.beginGroup(tr("Path"));
   //更改成相对地址
   QString curPath = QDir::currentPath();
   if(m_pluginDir.contains(curPath)){//如果在文件夹内，采用相对地址
       QString relPluginPath = "./" + m_pluginDir.mid(curPath.length()+1);
       setting.setValue("PluginPath",relPluginPath);
   }
   else{//绝对地址
       setting.setValue("PluginPath",m_pluginDir);
   }

   setting.endGroup();//节点结束

    return 0;
}


///
/// \brief MainFormView::生成头文件
/// \param path
/// \return
///
int MainFormView::Generate_UserCode(QString &path,bool isAbsolute){
    QString codeFileName = "DRE_Code.h";

    QFile code_f(path+"/"+codeFileName);

        if(!code_f.open(QIODevice::WriteOnly | QIODevice::Text))
        {
            QMessageBox::warning(this,tr("Code Generate Error!"),"Open failed.");
            return -1;
        }

        QTextStream txtOutput(&code_f);

        //定义头文件
        txtOutput << "/* The file is generated by DRE_Master */" << endl << endl;
        txtOutput << "#ifndef _DRE_CODE_H_" << endl;
        txtOutput << "#define _DRE_CODE_H_" << endl;
        txtOutput <<endl;


        QString enum_header = "typedef enum {";
        QString enum_end = "} DRE_Slave_";
        QString class_header = "class DRE_SlaveClass_";
        QString class_end = "};";

        int num;
        int tmp_offset = -1;//-1表示没有初始化

    foreach (Ethercat_Slave slave, *(m_master->get_SlaveListPtr())) {
        txtOutput << (class_header +QString::number(slave.m_slave_index)) <<"{" << endl;//每一个从站都赋予一个类
        txtOutput << "public:"<<endl;

        txtOutput << " /* DRE_SLave_" + QString::number(slave.m_slave_index) + " , " + slave.m_name + " Definition */" << endl;
        txtOutput << enum_header << endl;
        //以enum的形式输出
//        mDeviceTree->Add_LeftTree_Slaves(slave.m_slave_index,slave.m_name);
        txtOutput << "\t /* Inputs */" << endl;

        num = 1;
        tmp_offset = -1;//-1表示没有初始化
        foreach (Ethercat_SlaveMSG_Item input, slave.input_list) {
            //qDebug() << input.dump_data(true);
            if(tmp_offset == -1){
                if(isAbsolute){
                    tmp_offset = 0;
                }
                else{
                   tmp_offset = input.m_addr_offset;
                }
            }
            txtOutput << "\t input_"+QString::number(num) + "_" + input.m_name + " = " + "0x"+ QString::number(input.m_addr_offset - tmp_offset,16);
            if(num++ <= slave.input_list.size()){
                txtOutput << ",";
            }
            txtOutput << " /* " + input.m_name + "," + "0x"+QString::number(input.m_obj_index,16) + "," + input.dataType_Tostring() + " */" << endl;
        }

        txtOutput << "\t /* Outputs */" << endl;

        num = 1;
        tmp_offset = -1;//-1表示没有初始化
        foreach (Ethercat_SlaveMSG_Item output, slave.output_list) {
           // qDebug() << output.dump_data(true);
            if(tmp_offset == -1){
                if(isAbsolute){
                    tmp_offset = 0;
                }
                else{
                   tmp_offset = output.m_addr_offset;
                }
            }
            txtOutput << "\t output_"+QString::number(num) + "_" + output.m_name + " = " + "0x"+QString::number(output.m_addr_offset - tmp_offset,16);
            if(num++ < slave.output_list.size()){
                txtOutput << ",";
            }
            txtOutput << " /* " + output.m_name + "," + "0x"+QString::number(output.m_obj_index,16) + "," + output.dataType_Tostring() + " */" << endl;
        }

        txtOutput << enum_end + QString::number(slave.m_slave_index) + ";"<< endl;

        txtOutput << class_end << endl;

        txtOutput << endl;
    }

    txtOutput << "#endif _DRE_CODE_H_" << endl;
    code_f.close();

    QMessageBox::information(this,tr("Information"),codeFileName+" Generate OK!");

    return  0;
}

/********* 自定义消息处理 **********/
///
/// \brief 设置状态栏的信息
/// \param message
///
void MainFormView::Set_StatusMessage(QString message, int interval)
{
    emit StatusMessage_change(message,interval);//发出自定义信号
}

///
/// \brief 设置状态栏的widget
/// \param widget
/// \param isAdd
///
void MainFormView::Set_StatusWidget(QWidget *widget, bool isAdd)
{
     emit StatusWidget_change(widget,isAdd);//发出自定义信号
}

///
/// \brief 主站状态改变
/// \param isRun
///
void MainFormView::masterMode_change(bool isRun)
{
    emit MasterRunMode_change(isRun);
}

/********* 自定义消息处理 END **********/
